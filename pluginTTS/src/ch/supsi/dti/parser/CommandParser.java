package ch.supsi.dti.parser;

import ch.supsi.dti.utils.CursorInformations;

/* Generated By:JavaCC: Do not edit this line. CommandParser.java */

public class CommandParser implements CommandParserConstants {

	String value;

	final public String parse() throws ParseException {
		String ret = instructions();
		jj_consume_token(0);
		return ret;
	}

	final public String instructions() throws ParseException {
		String ret;
		Token t;
		Token id;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case GETINFO:
			t = new Token();
			jj_consume_token(GETINFO);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SINGLES:
				t = jj_consume_token(SINGLES);
				ret = singles(t);
				break;
			case BINARY:
				t = jj_consume_token(BINARY);
				ret = binary(t);
				break;
			default:
				jj_la1[0] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;
		case HOWMUCH:
			jj_consume_token(HOWMUCH);
			t = jj_consume_token(COUNTING);
			id = jj_consume_token(IDENTIFIER);
			ret = identifier(id);
			{
				switch(t.toString().toLowerCase()){
				case "methods":
					ret = "number of methods for class: " + id;
					break;
				case "fields":
					ret = "number of field for method: " + id;
					break;
				}
			}
			break;
		default:
			jj_la1[1] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}
		
		return ret;
		//throw new Error("Missing return statement in function");
	}

	final public String singles(Token t) throws ParseException {
		{
			switch(t.toString().toLowerCase()){
			case "cursor":
				return CursorInformations.getCursorLineAndColumn();
			case "editor":
				return "editor informations....";
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public String binary(Token t) throws ParseException {
		String ret;
		Token id;
		id = jj_consume_token(IDENTIFIER);
		ret = identifier(id);
		{
			if (true)
				return "binary: " + t.toString() + ret;
		}
		throw new Error("Missing return statement in function");
	}

	final public String identifier(Token t) throws ParseException {
		{
			if (true)
				return "id: " + t.toString();
		}
		throw new Error("Missing return statement in function");
	}

	/** Generated Token Manager. */
	public CommandParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[2];
	static private int[] jj_la1_0;
	static {
		jj_la1_init_0();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x240, 0x4020, };
	}

	/** Constructor with InputStream. */
	public CommandParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public CommandParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new CommandParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public CommandParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new CommandParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public CommandParser(CommandParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(CommandParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[30];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 2; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 30; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

}
