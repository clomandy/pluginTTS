package ch.supsi.dti.parser;

/* Generated By:JavaCC: Do not edit this line. CommandParser.java */
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IWorkspace;
import org.eclipse.core.resources.IWorkspaceRoot;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jdt.internal.core.JavaProject;
import org.eclipse.jdt.internal.ui.packageview.PackageExplorerPart;
import org.eclipse.jface.viewers.TreeSelection;
import org.eclipse.swt.widgets.Tree;
import org.eclipse.swt.widgets.TreeItem;
import org.eclipse.ui.ISelectionService;
import org.eclipse.ui.PlatformUI;

import ch.supsi.dti.utils.CursorInformations;
import ch.supsi.dti.utils.GetPluginElements;
import ch.supsi.dti.utils.PackageInformations;
import ch.supsi.dti.utils.ProjectInformations;

public class CommandParser implements CommandParserConstants {
	String value;

	final public String parse() throws ParseException {
		String ret;
		ret = instructions();
		{
			if (true)
				return ret;
		}
		jj_consume_token(0);
		throw new Error("Missing return statement in function");
	}

	final public String instructions() throws ParseException {
		String ret;
		Token t;
		switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
		case INFO:
			t = new Token();
			jj_consume_token(INFO);
			switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
			case SINGLES:
				t = jj_consume_token(SINGLES);
				ret = infoSingles(t);
				break;
			case BINARY:
				t = jj_consume_token(BINARY);
				ret = infoBinary(t);
				break;
			default:
				jj_la1[0] = jj_gen;
				jj_consume_token(-1);
				throw new ParseException();
			}
			break;
		case OPEN:
			jj_consume_token(OPEN);
			t = jj_consume_token(BINARY);
			ret = openBinary(t);
			break;
		case EXPAND:
			jj_consume_token(EXPAND);
			t = jj_consume_token(BINARY);
			ret = expandBinary(t);
			break;
		case SELECT:
			jj_consume_token(SELECT);
			t = jj_consume_token(BINARY);
			ret = selectBinary(t);
			break;
		default:
			jj_la1[1] = jj_gen;
			jj_consume_token(-1);
			throw new ParseException();
		}

		return ret;
		// throw new Error("Missing return statement in function");
	}

	final public String infoSingles(Token t) throws ParseException {
		{
			switch (t.toString().toLowerCase()) {
			case "projects":
				return ProjectInformations.getGeneralInfo();
			case "packages":
				ISelectionService service = PlatformUI.getWorkbench()
						.getActiveWorkbenchWindow().getSelectionService();

				TreeSelection structured = (TreeSelection) service
						.getSelection("org.eclipse.jdt.ui.PackageExplorer");

				if (structured.isEmpty())
					return "No project selected!";

				PackageExplorerPart packageExplorer = GetPluginElements
						.getPackageExplorer();

				Tree tree = packageExplorer.getTreeViewer().getTree();

				TreeItem[] items = tree.getSelection();

				TreeItem selectedItem = items[0];
				TreeItem parent = selectedItem.getParentItem();
				TreeItem tmpParent = null;
				while (parent != null) {
					tmpParent = parent;
					parent = tmpParent.getParentItem();
				}
				if (tmpParent != null)
					parent = tmpParent;
				else
					parent = selectedItem;

				tree.setSelection(parent);
				parent.setExpanded(true);
				tree.setFocus();

				structured = (TreeSelection) service
						.getSelection("org.eclipse.jdt.ui.PackageExplorer");
				JavaProject javaProject = (JavaProject) structured
						.getFirstElement();				

				return PackageInformations.getGeneralInfo(javaProject);
			case "classes":
				return "classes informations....";
			case "methods":
				return "methods informations....";
			case "cursor":
				return CursorInformations.getCursorLineAndColumn();
			case "editor":
				return "editor informations....";
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public String infoBinary(Token t) throws ParseException {
		String ret;

		Token id;
		id = jj_consume_token(IDENTIFIER);
		ret = identifier(id);
		{
			switch (t.toString().toLowerCase()) {
			case "project":
				return ProjectInformations.getPunctalInfo(ret);
			case "package":
				return "package info";
			case "class":
				return "class info";
			case "method":
				return "method info";
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public String openBinary(Token t) throws ParseException {
		String ret;
		Token id;
		id = jj_consume_token(IDENTIFIER);
		ret = identifier(id);
		{
			if (true)
				return "binary: " + t.toString() + ret;
		}
		throw new Error("Missing return statement in function");
	}

	final public String expandBinary(Token t) throws ParseException {

		PackageExplorerPart packageExplorer = GetPluginElements
				.getPackageExplorer();

		Tree tree = packageExplorer.getTreeViewer().getTree();

		TreeItem[] items = tree.getSelection();

		TreeItem selectedItem = items[0];
		selectedItem.setExpanded(true);
		return "Done!";
	}

	final public String selectBinary(Token t) throws ParseException {
		String ret;
		Token id;
		id = jj_consume_token(IDENTIFIER);
		ret = identifier(id);
		{
			switch (t.toString().toLowerCase()) {
			case "project":
				PackageExplorerPart packageExplorer = GetPluginElements
						.getPackageExplorer();
				IWorkspace workspace = ResourcesPlugin.getWorkspace();
				IWorkspaceRoot root = workspace.getRoot();
				IProject project = root.getProject(ret);
				if (!project.exists())
					return "Project doesn't exist!";

				packageExplorer.setFocus();
				packageExplorer.selectAndReveal(project);
				return "Done!";
			case "package":
				return "package selected";
			case "class":
				return "class selected";
			case "method":
				return "method selected";
			}
		}
		throw new Error("Missing return statement in function");
	}

	final public String identifier(Token t) throws ParseException {
		{
			return t.toString();
		}
		// throw new Error("Missing return statement in function");
	}

	/** Generated Token Manager. */
	public CommandParserTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	public Token token;
	/** Next token. */
	public Token jj_nt;
	private int jj_ntk;
	private int jj_gen;
	final private int[] jj_la1 = new int[2];
	static private int[] jj_la1_0;
	static private int[] jj_la1_1;
	static {
		jj_la1_init_0();
		jj_la1_init_1();
	}

	private static void jj_la1_init_0() {
		jj_la1_0 = new int[] { 0x4200, 0x1e0, };
	}

	private static void jj_la1_init_1() {
		jj_la1_1 = new int[] { 0x0, 0x0, };
	}

	/** Constructor with InputStream. */
	public CommandParser(java.io.InputStream stream) {
		this(stream, null);
	}

	/** Constructor with InputStream and supplied encoding */
	public CommandParser(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source = new CommandParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream) {
		ReInit(stream, null);
	}

	/** Reinitialise. */
	public void ReInit(java.io.InputStream stream, String encoding) {
		try {
			jj_input_stream.ReInit(stream, encoding, 1, 1);
		} catch (java.io.UnsupportedEncodingException e) {
			throw new RuntimeException(e);
		}
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Constructor. */
	public CommandParser(java.io.Reader stream) {
		jj_input_stream = new SimpleCharStream(stream, 1, 1);
		token_source = new CommandParserTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(java.io.Reader stream) {
		jj_input_stream.ReInit(stream, 1, 1);
		token_source.ReInit(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Constructor with generated Token Manager. */
	public CommandParser(CommandParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	/** Reinitialise. */
	public void ReInit(CommandParserTokenManager tm) {
		token_source = tm;
		token = new Token();
		jj_ntk = -1;
		jj_gen = 0;
		for (int i = 0; i < 2; i++)
			jj_la1[i] = -1;
	}

	private Token jj_consume_token(int kind) throws ParseException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			jj_gen++;
			return token;
		}
		token = oldToken;
		jj_kind = kind;
		throw generateParseException();
	}

	/** Get the next Token. */
	final public Token getNextToken() {
		if (token.next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		jj_gen++;
		return token;
	}

	/** Get the specific Token. */
	final public Token getToken(int index) {
		Token t = token;
		for (int i = 0; i < index; i++) {
			if (t.next != null)
				t = t.next;
			else
				t = t.next = token_source.getNextToken();
		}
		return t;
	}

	private int jj_ntk() {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
	private int[] jj_expentry;
	private int jj_kind = -1;

	/** Generate ParseException. */
	public ParseException generateParseException() {
		jj_expentries.clear();
		boolean[] la1tokens = new boolean[36];
		if (jj_kind >= 0) {
			la1tokens[jj_kind] = true;
			jj_kind = -1;
		}
		for (int i = 0; i < 2; i++) {
			if (jj_la1[i] == jj_gen) {
				for (int j = 0; j < 32; j++) {
					if ((jj_la1_0[i] & (1 << j)) != 0) {
						la1tokens[j] = true;
					}
					if ((jj_la1_1[i] & (1 << j)) != 0) {
						la1tokens[32 + j] = true;
					}
				}
			}
		}
		for (int i = 0; i < 36; i++) {
			if (la1tokens[i]) {
				jj_expentry = new int[1];
				jj_expentry[0] = i;
				jj_expentries.add(jj_expentry);
			}
		}
		int[][] exptokseq = new int[jj_expentries.size()][];
		for (int i = 0; i < jj_expentries.size(); i++) {
			exptokseq[i] = jj_expentries.get(i);
		}
		return new ParseException(token, exptokseq, tokenImage);
	}

	/** Enable tracing. */
	final public void enable_tracing() {
	}

	/** Disable tracing. */
	final public void disable_tracing() {
	}

}
